# Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Description: WSO2 API Manager deployment with WSO2 Micro Integrator
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Basic Configuration
        Parameters:
          - AWSAccessKeyId
          - AWSAccessKeySecret
          - WUMUsername
          - WUMPassword
          - KeyPairName
          - WSO2InstanceType
          - CertificateName
          - WSO2APIMDBInstanceEndpointAddress
          - WSO2APIMDBInstanceEndpointPort
          - DB
          - DBUsername
          - DBPassword
      - Label:
          default: Advanced Configuration
        Parameters:
          - OperatingSystem
          - CustomUserData
          - JDK
          - ElasticSearchEndpoint
          - ElasticSearchRegion
          - EnvironmentName
          - WSO2APIMVPC
          - WSO2APIMPrivateSubnet1
          - WSO2APIMPrivateSubnet2
          - WSO2APIMPublicSubnet1
          - WSO2APIMPublicSubnet2
    ParameterLabels:
      AWSAccessKeyId:
        default: AWS Access Key ID
      AWSAccessKeySecret:
        default: AWS Access Secret Key
      WUMUsername:
        default: WSO2 Username
      WUMPassword:
        default: WSO2 Password
      OperatingSystem:
        default: Operating System
      CertificateName:
        default: SSL Certificate Name
      WSO2APIMDBInstanceEndpointAddress:
        default: DBInstance Endpoint Address
      WSO2APIMDBInstanceEndpointPort:
        default: DBInstance Port
      KeyPairName:
        default: Key Pair Name
      DBUsername:
        default: DB Username
      DBPassword:
        default: DB Password
      EnvironmentName:
        default: Environment Name
      JDK:
        default: JDK
      CustomUserData:
        default: Customer User Data
      WSO2InstanceType:
        default: Instance Type
      DB:
        default: Database
      ElasticSearchEndpoint:
        default: ElasticSearch Endpoint
      ElasticSearchRegion:
        default: ElasticSearch Region
      WSO2APIMVPC:
        default: VPC ID
      WSO2APIMPrivateSubnet1:
        default: WSO2 Private Subnet 1 - ID
      WSO2APIMPrivateSubnet2:
        default: WSO2 Private Subnet 2 - ID
      WSO2APIMPublicSubnet1:
        default: WSO2 Public Subnet 1 - ID
      WSO2APIMPublicSubnet2:
        default: WSO2 Public Subnet 2 - ID
Resources:
  # Product configurations
  WSO2APIMSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2APIMVPC
      GroupDescription: WSO2 API Manager Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          SourceSecurityGroupId: !Ref WSO2APIMLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          SourceSecurityGroupId: !Ref WSO2APIMLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          SourceSecurityGroupId: !Ref WSO2APIMLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          SourceSecurityGroupId: !Ref WSO2APIMLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '5672'
          ToPort: '5672'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4000'
          ToPort: '4000'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9611'
          ToPort: '9611'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9711'
          ToPort: '9711'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} WSO2APIMSecurityGroup
  PuppetMaster:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - WSO2PuppetMasterRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu1804
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '50'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} PuppetMasterInstance
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2APIMPrivateSubnet1
          GroupSet:
            - !Ref PuppetMasterSecurityGroup
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            - 'export PATH=~/.local/bin:$PATH'
            - apt-get update
            - apt-get -y install python-setuptools python-pip
            - pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            - echo "> Set hostname to puppetmaster"
            - hostname puppetmaster
            - echo $(hostname) >> /etc/hostname
            - echo "127.0.0.1 $(hostname)" >> /etc/hosts
            - !Join
              - ''
              - - sed -i "s/access-key/
                - !Ref AWSAccessKeyId
                - /g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - !Join
              - ''
              - - sed -i "s/REGION_NAME/
                - !Ref ElasticSearchRegion
                - /g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - !Join
              - ''
              - - sed -i "s^secret-key^
                - !Ref AWSAccessKeySecret
                - ^g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - !Join
              - ''
              - - sed -i "s^STACK_NAME^
                - !Ref AWS::StackName
                - ^g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - !Join
              - ''
              - - sed -i "s^ELASTICSEARCH_ENDPOINT^
                - !Ref ElasticSearchEndpoint
                - ^g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - export INSTANCEID=$(ec2metadata | grep -m 1 'instance-id:' | awk '{print $2}')
            - sed -i "s/INSTANCE_ID/$INSTANCEID/g" /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf
            - apt-get update
            - apt install openjdk-8-jre-headless -y
            - nohup /usr/lib/logstash-6.5.1/bin/logstash -f /usr/lib/logstash-6.5.1/logstash-PUPPETMASTER.conf & >> /home/ubuntu/elastic.log
            - sed -i '/\[main\]/a dns_alt_names=puppetmaster,puppet' /etc/puppet/puppet.conf
            - sed -i '/\[master\]/a autosign=true' /etc/puppet/puppet.conf
            - service puppetmaster restart
            - cd /home/ubuntu/
            - wget -O wso2_update.sh https://s3.amazonaws.com/apim-4.1.0-cfn/wso2_update.sh
            - chmod +x wso2_update.sh
            - !Sub "./wso2_update.sh '${WUMUsername}' '${WUMPassword}' 'wso2am-4.1.0'"
            - !Sub "./wso2_update.sh '${WUMUsername}' '${WUMPassword}' 'wso2mi-4.1.0'"
            - !Sub "/usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource PuppetMaster --region ${AWS::Region}"
            - !Join
              - ''
              - - sed -i "s/access-key/
                - !Ref AWSAccessKeyId
                - /g" /etc/puppet/code/environments/production/modules/apim_common/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/REGION_NAME/
                - !Ref "AWS::Region"
                - /g" /etc/puppet/code/environments/production/modules/apim_common/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s^secretkey^
                - !Ref AWSAccessKeySecret
                - ^g" /etc/puppet/code/environments/production/modules/apim_common/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_ELB_DNS_NAME/
                - !GetAtt
                  - WSO2APIMLoadBalancer
                  - DNSName
                - >-
                  /g"
                  /etc/puppet/code/environments/production/modules/apim/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_ELB_DNS_NAME/
                - !GetAtt
                  - WSO2APIMLoadBalancer
                  - DNSName
                - >-
                  /g"
                  /etc/puppet/code/environments/production/modules/apim_common/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /etc/puppet/code/environments/production/modules/apim_common/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /etc/puppet/code/environments/production/modules/apim_common/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DBMS/
                - !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /etc/puppet/code/environments/production/modules/apim_common/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_RDS_URL/
                - !Ref WSO2APIMDBInstanceEndpointAddress
                - /g" /etc/puppet/code/environments/production/modules/apim_common/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_ELB_DNS_NAME/
                - !GetAtt
                  - WSO2APIMLoadBalancer
                  - DNSName
                - >-
                  /g"
                  /etc/puppet/code/environments/production/modules/mi/manifests/params.pp
            - export DB_NAME=WSO2AMDB
            - !Join
              - ''
              - - export DB_HOSTNAME=
                - !Ref WSO2APIMDBInstanceEndpointAddress
            - !Join
              - ''
              - - export DB_PORT=
                - !Ref WSO2APIMDBInstanceEndpointPort
            - !Join
              - ''
              - - export DB_USERNAME=
                - !Ref DBUsername
            - !Join
              - ''
              - - export DB_PASSWORD=
                - !Ref DBPassword
            - !Join
             - ''
             - - sed -i "s/JDK_TYPE/
               - !Ref JDK
               - /g" /etc/puppet/code/environments/production/modules/apim_common/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_HOST/
                - !Ref WSO2APIMDBInstanceEndpointAddress
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PORT/
                - !Ref WSO2APIMDBInstanceEndpointPort
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DBMS_NAME/
                - !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DBMS_VERSION/
                - !Select [1, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_PRODUCT_VERSION/
                - 4.1.0
                - /g" /usr/local/bin/provision_db_apim.sh
            - bash /usr/local/bin/provision_db_apim.sh
  PuppetMasterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2APIMVPC
      GroupDescription: WSO2 API Manager Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} PuppetMasterSecurityGroup
  WSO2APIMNode1LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2APIMAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2APIMSecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"
          #!/bin/bash
          export PATH=~/.local/bin:$PATH
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              apt install -y puppet nfs-common
              apt install -y python-pip
              apt install -y python3-pip
              pip3 install boto3
              pip install boto3
              sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              yum install -y epel-release zip unzip nfs-utils
              yum install -y python-pip
              pip install boto3
              rpm -Uvh https://yum.puppetlabs.com/puppet5/puppet5-release-el-7.noarch.rpm
              yum install -y puppet-agent
              echo $'[main]\nserver = puppet\ncertname = agent1\nenvironment = production\n\runinterval = 1h' > /etc/puppetlabs/puppet/puppet.conf
          fi
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          wget https://s3.amazonaws.com/wso2logarchiever/log_archiver/log_archiver.sh
          wget --no-check-certificate --no-proxy 'http://wso2-cloudformation-templates.s3.amazonaws.com/private_ip_extractor.py' -P /usr/local/bin/
          wget --no-check-certificate --no-proxy 'http://wso2-cloudformation-templates.s3.amazonaws.com/apim_private_ip_extractor.py' -P /usr/local/bin/
          mv log_archiver.sh /usr/lib/
          export ProductVersion=4.1.0
          sed -i "s/Product_Version/4.1.0/g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          sed -i "s^secret-key^${AWSAccessKeySecret}^g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          sed -i "s/access-key/${AWSAccessKeyId}/g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          sed -i "s^ELASTICSEARCH_ENDPOINT^${ElasticSearchEndpoint}^g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          export INSTANCEID=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
          sed -i "s/INSTANCE_ID/$INSTANCEID/g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          sed -i "s/STACK_NAME/${AWS::StackName}/g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          sed -i "s/REGION_NAME/${ElasticSearchRegion}/g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          nohup /usr/lib/logstash-6.5.1/bin/logstash -f /usr/lib/logstash-6.5.1/logstash-APIM.conf &
          export PuppetmasterIP=${PuppetMaster.PrivateIp}
          echo "$PuppetmasterIP puppet puppetmaster" >> /etc/hosts
          export ALBDNS=${WSO2APIMLoadBalancer.DNSName}
          echo "127.0.0.1 $ALBDNS" >> /etc/hosts
          service puppet restart
          sleep 100
          export FACTER_profile=apim
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              puppet agent -vt >> /var/log/puppetlog.log
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /opt/puppetlabs/bin/puppet agent -vt >> /var/log/puppetlog.log
          fi
          sleep 30
          service puppet stop
          export APIMNODE1IP=$(python /usr/local/bin/private_ip_extractor.py ${AWS::Region} ${AWSAccessKeyId} ${AWSAccessKeySecret} WSO2APIMInstance1)
          sed -i "s/tm1.local/$APIMNODE1IP/g" /usr/lib/wso2/wso2am/4.1.0/wso2am-4.1.0/repository/conf/deployment.toml
          export APIMNODE2IP=$(python /usr/local/bin/private_ip_extractor.py ${AWS::Region} ${AWSAccessKeyId} ${AWSAccessKeySecret} WSO2APIMInstance2)
          sed -i "s/tm2.local/$APIMNODE2IP/g" /usr/lib/wso2/wso2am/4.1.0/wso2am-4.1.0/repository/conf/deployment.toml
          sed -i "s/OTHERAPIMNODE/$APIMNODE2IP/g" /usr/lib/wso2/wso2am/4.1.0/wso2am-4.1.0/repository/conf/deployment.toml
          sleep 100
          sh /usr/lib/wso2/wso2am/4.1.0/wso2am-4.1.0/bin/api-manager.sh start
          ${CustomUserData}
          sleep 30
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                      /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2APIMNode1AutoScalingGroup --region ${AWS::Region}
                      break
                  fi
              done
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                      /usr/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2APIMNode1AutoScalingGroup --region ${AWS::Region}
                      break
                  fi
              done
          fi
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2APIMSecurityGroup
      - WSO2APIMLoadBalancer
      - PuppetMaster
  WSO2APIMNode1AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2APIMNode1LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      TargetGroupARNs:
        - !Ref WSO2APIMALBTargetGroup
        - !Ref WSO2APIMALB8243TargetGroup
      VPCZoneIdentifier:
        - !Ref WSO2APIMPrivateSubnet1
      Tags:
        - Key: Name
          Value: WSO2APIMInstance1
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: apim
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
    DependsOn:
      - WSO2APIMLoadBalancer
  WSO2APIMNode2LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2APIMAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2APIMSecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"
          #!/bin/bash
          export PATH=~/.local/bin:$PATH
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              apt install -y puppet nfs-common
              apt install -y python-pip
              apt install -y python3-pip
              pip3 install boto3
              pip install boto3
              sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              yum install -y epel-release zip unzip nfs-utils
              yum install -y python-pip
              pip install boto3
              rpm -Uvh https://yum.puppetlabs.com/puppet5/puppet5-release-el-7.noarch.rpm
              yum install -y puppet-agent
              echo $'[main]\nserver = puppet\ncertname = agent2\nenvironment = production\n\runinterval = 1h' > /etc/puppetlabs/puppet/puppet.conf
          fi
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          wget https://s3.amazonaws.com/wso2logarchiever/log_archiver/log_archiver.sh
          wget --no-check-certificate --no-proxy 'http://wso2-cloudformation-templates.s3.amazonaws.com/private_ip_extractor.py' -P /usr/local/bin/
          wget --no-check-certificate --no-proxy 'http://wso2-cloudformation-templates.s3.amazonaws.com/apim_private_ip_extractor.py' -P /usr/local/bin/
          mv log_archiver.sh /usr/lib/
          export ProductVersion=4.1.0
          sed -i "s/Product_Version/4.1.0/g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          sed -i "s^secret-key^${AWSAccessKeySecret}^g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          sed -i "s/access-key/${AWSAccessKeyId}/g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          sed -i "s^ELASTICSEARCH_ENDPOINT^${ElasticSearchEndpoint}^g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          export INSTANCEID=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
          sed -i "s/INSTANCE_ID/$INSTANCEID/g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          sed -i "s/STACK_NAME/${AWS::StackName}/g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          sed -i "s/REGION_NAME/${ElasticSearchRegion}/g" /usr/lib/logstash-6.5.1/logstash-APIM.conf
          nohup /usr/lib/logstash-6.5.1/bin/logstash -f /usr/lib/logstash-6.5.1/logstash-APIM.conf &
          export PuppetmasterIP=${PuppetMaster.PrivateIp}
          echo "$PuppetmasterIP puppet puppetmaster" >> /etc/hosts
          export ALBDNS=${WSO2APIMLoadBalancer.DNSName}
          echo "127.0.0.1 $ALBDNS" >> /etc/hosts
          service puppet restart
          sleep 100
          export FACTER_profile=apim
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              puppet agent -vt >> /var/log/puppetlog.log
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /opt/puppetlabs/bin/puppet agent -vt >> /var/log/puppetlog.log
          fi
          sleep 30
          service puppet stop
          export APIMNODE1IP=$(python /usr/local/bin/private_ip_extractor.py ${AWS::Region} ${AWSAccessKeyId} ${AWSAccessKeySecret} WSO2APIMInstance1)
          sed -i "s/tm1.local/$APIMNODE1IP/g" /usr/lib/wso2/wso2am/4.1.0/wso2am-4.1.0/repository/conf/deployment.toml
          export APIMNODE2IP=$(python /usr/local/bin/private_ip_extractor.py ${AWS::Region} ${AWSAccessKeyId} ${AWSAccessKeySecret} WSO2APIMInstance2)
          sed -i "s/tm2.local/$APIMNODE2IP/g" /usr/lib/wso2/wso2am/4.1.0/wso2am-4.1.0/repository/conf/deployment.toml
          sed -i "s/OTHERAPIMNODE/$APIMNODE1IP/g" /usr/lib/wso2/wso2am/4.1.0/wso2am-4.1.0/repository/conf/deployment.toml
          sleep 100
          sh /usr/lib/wso2/wso2am/4.1.0/wso2am-4.1.0/bin/api-manager.sh start
          ${CustomUserData}
          sleep 30
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                      /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2APIMNode2AutoScalingGroup --region ${AWS::Region}
                      break
                  fi
              done
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                      /usr/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2APIMNode2AutoScalingGroup --region ${AWS::Region}
                      break
                  fi
              done
          fi
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2APIMSecurityGroup
      - WSO2APIMLoadBalancer
      - PuppetMaster
  WSO2APIMNode2AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2APIMNode2LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      TargetGroupARNs:
        - !Ref WSO2APIMALBTargetGroup
        - !Ref WSO2APIMALB8243TargetGroup
      VPCZoneIdentifier:
        - !Ref WSO2APIMPrivateSubnet2
      Tags:
        - Key: Name
          Value: WSO2APIMInstance2
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: apim
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
    DependsOn:
      - WSO2APIMLoadBalancer
  WSO2APIMLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2APIMVPC
      GroupDescription: WSO2 APIM ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4000'
          ToPort: '4000'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8290'
          ToPort: '8290'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8253'
          ToPort: '8253'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4000'
          ToPort: '4000'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8290'
          ToPort: '8290'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8253'
          ToPort: '8253'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} WSO2APIMLoadBalancerSecurityGroup
  WSO2APIMLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: APIM
      Scheme: internet-facing
      Subnets:
        - !Ref WSO2APIMPublicSubnet1
        - !Ref WSO2APIMPublicSubnet2
      SecurityGroups:
        - !Ref WSO2APIMLoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} WSO2APIMLoadBalancer
  WSO2APIMALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /carbon/admin/login.jsp
      HealthCheckPort: 9443
      Matcher:
        HttpCode: 200
      Name: apim-carbon-9443
      Port: 9443
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2APIMVPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} WSO2APIMALBTargetGroup
  WSO2APIMALB8243TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /services/Version
      HealthCheckPort: 8243
      Matcher:
        HttpCode: 200
      Name: apim-carbon-8243
      Port: 8243
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2APIMVPC
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} WSO2APIMALB8243TargetGroup
  WSO2MIALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /healthz
      HealthCheckPort: 9201
      Matcher:
        HttpCode: 200
      Name: mi-9201
      Port: 9201
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
        - Key: stickiness.enabled
          Value: 'true'
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2APIMVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} WSO2MIALBTargetGroup
  WSO2APIMALB443Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2APIMALBTargetGroup
      Certificates:
        - CertificateArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':server-certificate'
            - /
            - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2APIMLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
    DependsOn:
      - WSO2APIMLoadBalancerSecurityGroup
  WSO2APIMALB8243Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2APIMALB8243TargetGroup
      Certificates:
        - CertificateArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':server-certificate'
            - /
            - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2APIMLoadBalancer
      Port: 8243
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
    DependsOn:
      - WSO2APIMLoadBalancerSecurityGroup
  WSO2APIMALB9443Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2APIMALBTargetGroup
      Certificates:
        - CertificateArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':server-certificate'
            - /
            - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2APIMLoadBalancer
      Port: 9443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
    DependsOn:
      - WSO2APIMLoadBalancerSecurityGroup
  WSO2MIALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2MIALBTargetGroup
      Certificates:
        - CertificateArn: !Join
            - ''
            - - 'arn:aws:iam::'
              - !Ref 'AWS::AccountId'
              - ':server-certificate'
              - /
              - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2APIMLoadBalancer
      Port: 9201
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
    DependsOn:
      - WSO2APIMLoadBalancerSecurityGroup
    ############ MICRO INTEGRATOR ############
  WSO2MISecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2APIMVPC
      GroupDescription: WSO2 Micro Integrator Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4040'
          ToPort: '4040'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8253'
          ToPort: '8253'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8290'
          ToPort: '8290'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9164'
          ToPort: '9164'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9201'
          ToPort: '9201'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} WSO2MISecurityGroup
  WSO2MINode1LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2APIMAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2MISecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"
          #!/bin/bash
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          export PATH=~/.local/bin:$PATH
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              export DEBIAN_FRONTEND=noninteractive
              apt-get update
              apt install -y puppet nfs-common
              apt install -y python-pip
              apt install -y python3-pip
              pip3 install boto3
              pip install boto3
              sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              yum install -y epel-release zip unzip nfs-utils
              yum install -y python-pip
              pip install boto3
              rpm -Uvh https://yum.puppetlabs.com/puppet5/puppet5-release-el-7.noarch.rpm
              yum install -y puppet-agent
              echo $'[main]\nserver = puppet\ncertname = agent3\nenvironment = production\n\runinterval = 1h' > /etc/puppetlabs/puppet/puppet.conf
          fi
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          export PuppetmasterIP=${PuppetMaster.PrivateIp}
          echo "$PuppetmasterIP puppet puppetmaster" >> /etc/hosts
          export MI_HOST=${WSO2APIMLoadBalancer.DNSName}
          export MI_PORT=8290
          service puppet restart
          sleep 150
          export FACTER_profile=mi
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              puppet agent -vt >> /var/log/puppetlog.log
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /opt/puppetlabs/bin/puppet agent -vt >> /var/log/puppetlog.log
          fi
          sleep 30
          service puppet stop
          sh /usr/lib/wso2/wso2am/4.1.0/wso2mi-4.1.0/bin/micro-integrator.sh start
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2MINode1AutoScalingGroup --region ${AWS::Region}
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /usr/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2MINode1AutoScalingGroup --region ${AWS::Region}
          fi
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2MISecurityGroup
      - WSO2APIMSecurityGroup
      - PuppetMaster
  WSO2MINode1AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2MINode1LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      VPCZoneIdentifier:
        - !Ref WSO2APIMPrivateSubnet1
        - !Ref WSO2APIMPrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} WSO2MIInstance
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
    DependsOn:
      - WSO2APIMNode1AutoScalingGroup
      - WSO2APIMNode2AutoScalingGroup
Outputs:
  CarbonServerUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/services/'
    Description: APIM service carbon URL
  MgtConsoleUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/carbon'
    Description: APIM service carbon URL
  PublisherUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/publisher'
    Description: APIM service publisher URL
  DevPortalUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/devportal'
    Description: APIM service devportal URL
  AdminUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/admin'
    Description: APIM service admin URL
  KeyManagerUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/services/'
    Description: APIM keymanager service admin URL
  GatewayHttpsUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - ':8243'
    Description: APIM HTTPS Gateway endpoint
  GatewayHttpUrl:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - ':8280'
    Description: APIM HTTP Gateway endpoint
  MIPassThroughHttpsUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - ':8253'
    Description: MI HTTPS Pass Through URL
  MIPassThroughHttpUrl:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - ':8290'
    Description: MI HTTP Pass Through URL
Parameters:
  AWSAccessKeyId:
    Type: String
  AWSAccessKeySecret:
    Type: String
    NoEcho: true
  WUMUsername:
    Type: String
    Default: ""
  WUMPassword:
    Type: String
    Default: ""
    NoEcho: true
  KeyPairName:
    Description: >-
      The private key used to log in to instances through SSH
    Type: 'AWS::EC2::KeyPair::KeyName'
  CertificateName:
    Description: A valid SSL certificate used for HTTPS
    Type: String
    MinLength: 1
  WSO2InstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
    ConstraintDescription: Must be a valid EC2 instance type
  CustomUserData:
    Type: String
    Default: "echo"
  JDK:
    Description: Choose preferred JDK from the list
    Type: String
    Default: "ORACLE_JDK8"
    AllowedValues:
      - "ORACLE_JDK8"
      - "CORRETTO_JDK8"
      - "TEMURIN_JDK8"
      - "CORRETTO_JDK11"
      - "TEMURIN_JDK11"
  ElasticSearchEndpoint:
    Description: If you have ElasticSearch endpoint to publish logs, else keep this empty
    Type: String
    Default: ""
  WSO2APIMDBInstanceEndpointAddress:
    Type: String
  WSO2APIMDBInstanceEndpointPort:
    Type: String
  DBUsername:
    Type: String
    MinLength: 4
    AllowedPattern: '[A-Za-z0-9\-]+'
  DBPassword:
    Type: String
    MinLength: 8
    NoEcho: true
  DB:
    Description: Choose preferred Database from the list
    Type: String
    Default: MySQL-5.7
    AllowedValues:
      - MySQL-5.7
      - MySQL-8.0
      - Postgres-11.15
      - Postgres-12.10
      - Oracle-SE2-19
      - SQLServer-SE-13.00
      - SQLServer-SE-14.00
  OperatingSystem:
    Type: String
    Default: Ubuntu1804
    AllowedValues:
      - Ubuntu1804
      - CentOS7
  ElasticSearchRegion:
    Type: String
    Default: "us-east-1"
    AllowedValues:
      - "us-east-1"
      - "us-east-2"
      - "us-west-1"
      - "us-west-2"
      - "ap-southeast-2"
      - "eu-west-1"
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: Dev
  WSO2APIMVPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID of your existing Virtual Private Cloud (VPC)
  WSO2APIMPrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet for PuppetMaster, Product Instance, and the DB
  WSO2APIMPrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Private Subnet for Prodcut Instance and the DB
  WSO2APIMPublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet for NAT Gateway, Bastion Instance and Load Balancer
  WSO2APIMPublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public Subnet for Load Balancer
Mappings:
  WSO2PuppetMasterRegionMap:
    ap-southeast-2:
       Ubuntu1804: ami-00e0394efc78b0754
    eu-west-1:
       Ubuntu1804: ami-0f967923a84f738ff
    us-east-1:
       Ubuntu1804: ami-0195b8912085f5df5
    us-east-2:
       Ubuntu1804: ami-06dd338cb9656866f
    us-west-1:
       Ubuntu1804: ami-0cc7dca3f38e3bcaf
    us-west-2:
       Ubuntu1804: ami-093398316628bedba
  WSO2APIMAMIRegionMap:
    ap-southeast-2:
      CentOS7: ami-0211f0ecd0e693937
      Ubuntu1804: ami-004b3c8a774600c79
    eu-west-1:
      CentOS7: ami-08137d567f9e9413e
      Ubuntu1804: ami-005de30fe41bbe8f3
    us-east-1:
      CentOS7: ami-09d4e63ccc46083c7
      Ubuntu1804: ami-02a2048d0e4afcd10
    us-east-2:
      CentOS7: ami-009ac95229cc07041
      Ubuntu1804: ami-0a1af21a7b34de8f7
    us-west-1:
      CentOS7: ami-0062ecf9cd0c8417d
      Ubuntu1804: ami-02cfec9ab1330bcbb
    us-west-2:
      CentOS7: ami-0cbe0a37066de0538
      Ubuntu1804: ami-0cc3da810abe655e0
  DBEngineMap:
    MySQL-5.7:
      DBEngine: "mysql_5.7"
    MySQL-8.0:
      DBEngine: "mysql_8.0"
    Postgres-11.15:
      DBEngine: "postgres_11.15"
    Postgres-12.10:
      DBEngine: "postgres_12.10"
    SQLServer-SE-13.00:
      DBEngine: "sqlserver-se_13.00"
    SQLServer-SE-14.00:
      DBEngine: "sqlserver-se_14.00"
    Oracle-SE2-19:
      DBEngine: "oracle-se2_19"
Conditions:
  UseSQLServerDB: !Equals [sqlserver-se, !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]]
  UseLicensedVersion: !Or [ !Equals [sqlserver, !Select [0, !Split ["-", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]], !Equals [oracle, !Select [0, !Split ["-", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]] ]
