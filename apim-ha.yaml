# Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Description: >-
  WSO2 API Manager deployment
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Basic Configuration
        Parameters:
          - AWSAccessKeyId
          - AWSAccessKeySecret
          - KeyPairName
          - WSO2InstanceType
          - CertificateName
          - DBUsername
          - DBPassword
          - WUMUsername
          - WUMPassword
      - Label:
          default: Advanced Configuration (Defaults will be used, if not set)
        Parameters:
          - OperatingSystem
          - ProductVersion
          - DB
          - DBAllocationStorage
          - DBInstanceType
          - CustomUserData
          - ElasticSearchEndpoint
    ParameterLabels:
      AWSAccessKeyId:
        default: AWS Access Key
      AWSAccessKeySecret:
        default: AWS Secret Key
      OperatingSystem:
        default: Operating System
      CertificateName:
        default: SSL Certificate Name
      KeyPairName:
        default: Key Pair
      DBUsername:
        default: Database Username
      DBPassword:
        default: Database Password
      DBAllocationStorage:
        default: Database Storage Allocation
      DBInstanceType:
        default: Database Instance Type
      CustomUserData:
        default: Custom User Data
      WUMUsername:
        default: WSO2 Username
      WUMPassword:
        default: WSO2 Password
      WSO2InstanceType:
        default: Instance Type
      DB:
        default: Database Engine and Version
      ElasticSearchEndpoint:
        default: ElasticSearch Endpoint
Resources:
  # networking configurations
  WSO2APIMVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  WSO2APIMPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2APIMVPC
      CidrBlock: 10.0.254.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  WSO2APIMPublicSubnet2:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref WSO2APIMVPC
        CidrBlock: 10.0.252.0/24
        AvailabilityZone: !Select
          - '1'
          - !GetAZs ''
  WSO2APIMPublicInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  WSO2APIMPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2APIMVPC
  WSO2APIMPublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2APIMPublicRouteTable
      SubnetId: !Ref WSO2APIMPublicSubnet1
  WSO2APIMPublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2APIMPublicRouteTable
      SubnetId: !Ref WSO2APIMPublicSubnet2
  WSO2APIMPublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref WSO2APIMPublicRouteTable
      GatewayId: !Ref WSO2APIMPublicInternetGateway
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn: WSO2APIMVPCInternetGatewayAttachment
  WSO2APIMVPCInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref WSO2APIMPublicInternetGateway
      VpcId: !Ref WSO2APIMVPC
  WSO2APIMPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2APIMVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
  WSO2APIMPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref WSO2APIMVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
  WSO2APIMPrivateSubnetRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref WSO2APIMVPC
  WSO2APIMPrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref WSO2APIMNATGateway
      RouteTableId: !Ref WSO2APIMPrivateSubnetRouteTable
  WSO2APIMPrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2APIMPrivateSubnetRouteTable
      SubnetId: !Ref WSO2APIMPrivateSubnet1
  WSO2APIMPrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref WSO2APIMPrivateSubnetRouteTable
      SubnetId: !Ref WSO2APIMPrivateSubnet2
  WSO2APIMNATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt
        - WSO2APIMEIP
        - AllocationId
      SubnetId: !Ref WSO2APIMPublicSubnet1
  WSO2BastionEIPAssociation:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      AllocationId: !GetAtt WSO2BastionEIP.AllocationId
      InstanceId: !Ref WSO2BastionInstance
  WSO2APIMEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  WSO2BastionEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  # database configurations
  WSO2APIMDBInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2APIMVPC
      GroupDescription: DB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '1521'
          ToPort: '1521'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '1433'
          ToPort: '1433'
          CidrIp: 0.0.0.0/0
  WSO2APIMDBInstance:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      VPCSecurityGroups:
        - !Ref WSO2APIMDBInstanceSecurityGroup
      DBInstanceClass: !Ref DBInstanceType
      AllocatedStorage: !Ref DBAllocationStorage
      BackupRetentionPeriod: '0'
      DBInstanceIdentifier: WSO2APIMDBInstance
      DBName: !If [UseSQLServerDB, "", WSO2AMDB]
      LicenseModel: !If [UseLicensedVersion, license-included, !Ref 'AWS::NoValue']
      EngineVersion: !Select [1, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
      Engine: !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MultiAZ: 'false'
      StorageType: gp2
      DBSubnetGroupName: !Ref WSO2APIMDBSubnetGroup
  WSO2APIMDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: DB Subnet Group
      SubnetIds:
        - !Ref WSO2APIMPrivateSubnet1
        - !Ref WSO2APIMPrivateSubnet2
  # File system configurations
  WSO2APIMEFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2APIMVPC
      GroupDescription: EFS Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0
  WSO2APIMEFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
  WSO2APIMPrivateSubnet1EFSMountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref WSO2APIMPrivateSubnet1
      FileSystemId: !Ref WSO2APIMEFSFileSystem
      SecurityGroups:
        - !Ref WSO2APIMEFSSecurityGroup
  WSO2APIMPrivateSubnet2EFSMountTarget:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      SubnetId: !Ref WSO2APIMPrivateSubnet2
      FileSystemId: !Ref WSO2APIMEFSFileSystem
      SecurityGroups:
        - !Ref WSO2APIMEFSSecurityGroup
  # Product configurations
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2APIMVPC
      GroupDescription: WSO2 API Manager Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  WSO2APIMSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2APIMVPC
      GroupDescription: WSO2 API Manager Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          SourceSecurityGroupId: !Ref WSO2APIMLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          SourceSecurityGroupId: !Ref WSO2APIMLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          SourceSecurityGroupId: !Ref WSO2APIMLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          SourceSecurityGroupId: !Ref WSO2APIMLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '5672'
          ToPort: '5672'
          SourceSecurityGroupId: !Ref WSO2APIMLoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4000'
          ToPort: '4000'
          CidrIp: 0.0.0.0/0
  WSO2BastionInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - WSO2APIMAMIRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu1804
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: WSO2BastionInstance
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2APIMPublicSubnet1
          GroupSet:
            - !Ref BastionSecurityGroup
  PuppetMaster:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !FindInMap
        - WSO2PuppetMasterRegionMap
        - !Ref 'AWS::Region'
        - Ubuntu1804
      InstanceType: !Ref WSO2InstanceType
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: PuppetMasterInstance
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref WSO2APIMPrivateSubnet1
          GroupSet:
            - !Ref PuppetMasterSecurityGroup
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '#!/bin/bash'
            - 'export PATH=~/.local/bin:$PATH'
            - echo "> Set hostname to puppetmaster"
            - hostname puppetmaster
            - echo $(hostname) >> /etc/hostname
            - echo "127.0.0.1 $(hostname)" >> /etc/hosts
            - sed -i '/\[main\]/a dns_alt_names=puppetmaster,puppet' /etc/puppet/puppet.conf
            - sed -i '/\[master\]/a autosign=true' /etc/puppet/puppet.conf
            - service puppetmaster restart
            - !Sub "./home/ubuntu/wso2-init.sh ${WUMUsername} ${WUMPassword} wso2am-2.6.0 False"
            - !Join
              - ''
              - - sed -i "s/access-key/
                - !Ref AWSAccessKeyId
                - /g" /etc/puppet/code/environments/production/modules/apim260/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/REGION_NAME/
                - !Ref "AWS::Region"
                - /g" /etc/puppet/code/environments/production/modules/apim260/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s^secretkey^
                - !Ref AWSAccessKeySecret
                - ^g" /etc/puppet/code/environments/production/modules/apim260/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_ELB_DNS_NAME/
                - !GetAtt
                  - WSO2APIMLoadBalancer
                  - DNSName
                - >-
                  /g"
                  /etc/puppet/code/environments/production/modules/apim260/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /etc/puppet/code/environments/production/modules/apim260/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /etc/puppet/code/environments/production/modules/apim260/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_DBMS/
                - !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /etc/puppet/code/environments/production/modules/apim260/manifests/params.pp
            - !Join
              - ''
              - - sed -i "s/CF_RDS_URL/
                - !GetAtt
                  - WSO2APIMDBInstance
                  - Endpoint.Address
                - /g" /etc/puppet/code/environments/production/modules/apim260/manifests/params.pp
            - export DB_NAME=WSO2AMDB
            - !Join
              - ''
              - - export DB_HOSTNAME=
                - !GetAtt
                  - WSO2APIMDBInstance
                  - Endpoint.Address
            - !Join
              - ''
              - - export DB_PORT=
                - !GetAtt
                  - WSO2APIMDBInstance
                  - Endpoint.Port
            - !Join
              - ''
              - - export DB_USERNAME=
                - !Ref DBUsername
            - !Join
              - ''
              - - export DB_PASSWORD=
                - !Ref DBPassword
            - !Join
              - ''
              - - sed -i "s/CF_DB_USERNAME/
                - !Ref DBUsername
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PASSWORD/
                - !Ref DBPassword
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_HOST/
                - !GetAtt
                  - WSO2APIMDBInstance
                  - Endpoint.Address
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DB_PORT/
                - !GetAtt
                  - WSO2APIMDBInstance
                  - Endpoint.Port
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DBMS_NAME/
                - !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_DBMS_VERSION/
                - !Select [1, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]
                - /g" /usr/local/bin/provision_db_apim.sh
            - !Join
              - ''
              - - sed -i "s/CF_PRODUCT_VERSION/
                - 2.6.0
                - /g" /usr/local/bin/provision_db_apim.sh
            - bash /usr/local/bin/provision_db_apim.sh
  PuppetMasterSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2APIMVPC
      GroupDescription: WSO2 API Manager Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8140'
          ToPort: '8140'
          CidrIp: 0.0.0.0/0
  WSO2APIMNode1LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2APIMAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2APIMSecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"
          #!/bin/bash
          export PATH=~/.local/bin:$PATH
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              apt-get update
              apt install -y puppet nfs-common
              apt install -y python-pip
              sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              yum install -y epel-release unzip nfs-utils
              yum install -y python-pip
              rpm -Uvh https://yum.puppetlabs.com/puppet5/puppet5-release-el-7.noarch.rpm
              yum install -y puppet-agent
              echo $'[main]\nserver = puppet\ncertname = agent1\nenvironment = production\n\runinterval = 1h' > /etc/puppetlabs/puppet/puppet.conf
          fi
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          export ProductVersion=2.6.0
          sed -i "s/Product_Version/2.6.0/g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          sed -i "s^secret-key^${AWSAccessKeySecret}^g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          sed -i "s/access-key/${AWSAccessKeyId}/g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          sed -i "s^ELASTICSEARCH_ENDPOINT^${ElasticSearchEndpoint}^g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          export INSTANCEID=$(ec2metadata | grep -m 1 'instance-id:' | awk '{print $2}')
          sed -i "s/INSTANCE_ID/$INSTANCEID/g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          sed -i "s/STACK_NAME/${AWS::StackName}/g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          sed -i "s/REGION_NAME/${AWS::Region}/g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          nohup /home/ubuntu/logstash-6.5.1/bin/logstash -f /home/ubuntu/logstash-6.5.1/logstash-APIM.conf &
          export PuppetmasterIP=${PuppetMaster.PrivateIp}
          echo "$PuppetmasterIP puppet puppetmaster" >> /etc/hosts
          service puppet restart
          mkdir -p /mnt/efs
          mount -t nfs4 -o nfsvers=4.1 ${WSO2APIMEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
          sleep 180
          export FACTER_profile=apim260
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              puppet agent -vt
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /opt/puppetlabs/bin/puppet agent -vt
          fi
          sleep 30
          if [ ! -d "/mnt/efs/server" ]; then
              mkdir -p /mnt/efs/server
              cp -r /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/repository/deployment/server /mnt/efs
          fi
          rm -rf  /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/repository/deployment/server
          ln -s /mnt/efs/server /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/repository/deployment/server
          if [ ! -d "/mnt/efs/tenants" ]; then
              mkdir -p /mnt/efs/tenants
              cp -r /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/repository/tenants /mnt/efs
          fi
          rm -rf /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/repository/tenants
          ln -s /mnt/efs/tenants /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/repository/tenants
          echo "${WSO2APIMEFSFileSystem}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/bin/wso2server.sh start
          ${CustomUserData}
          sleep 30
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                      /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2APIMNode1AutoScalingGroup --region ${AWS::Region}
                      break
                  fi
              done
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                      /usr/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2APIMNode1AutoScalingGroup --region ${AWS::Region}
                      break
                  fi
              done
          fi
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2APIMSecurityGroup
      - WSO2APIMLoadBalancer
      - WSO2APIMVPCInternetGatewayAttachment
      - PuppetMaster
  WSO2APIMNode1AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2APIMNode1LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      TargetGroupARNs:
        - !Ref WSO2APIMALBTargetGroup
        - !Ref WSO2APIMALB8243TargetGroup
      VPCZoneIdentifier:
        - !Ref WSO2APIMPrivateSubnet1
      Tags:
        - Key: Name
          Value: WSO2APIMInstance1
          PropagateAtLaunch: 'true'
        - Key: cluster
          Value: apim
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
    DependsOn:
      - WSO2APIMLoadBalancer
  WSO2APIMNode2LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap
        - WSO2APIMAMIRegionMap
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref WSO2InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref WSO2APIMSecurityGroup
      UserData: !Base64
        'Fn::Sub': |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"
          #!/bin/bash
          export PATH=~/.local/bin:$PATH
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              apt-get update
              apt install -y puppet nfs-common
              apt install -y python-pip
              sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              yum install -y epel-release unzip nfs-utils
              yum install -y python-pip
              rpm -Uvh https://yum.puppetlabs.com/puppet5/puppet5-release-el-7.noarch.rpm
              yum install -y puppet-agent
              echo $'[main]\nserver = puppet\ncertname = agent2\nenvironment = production\n\runinterval = 1h' > /etc/puppetlabs/puppet/puppet.conf
          fi
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          sed -i '/\[main\]/a server=puppet' /etc/puppet/puppet.conf
          export ProductVersion=2.6.0
          sed -i "s/Product_Version/2.6.0/g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          sed -i "s^secret-key^${AWSAccessKeySecret}^g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          sed -i "s/access-key/${AWSAccessKeyId}/g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          sed -i "s^ELASTICSEARCH_ENDPOINT^${ElasticSearchEndpoint}^g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          export INSTANCEID=$(ec2metadata | grep -m 1 'instance-id:' | awk '{print $2}')
          sed -i "s/INSTANCE_ID/$INSTANCEID/g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          sed -i "s/STACK_NAME/${AWS::StackName}/g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          sed -i "s/REGION_NAME/${AWS::Region}/g" /home/ubuntu/logstash-6.5.1/logstash-APIM.conf
          nohup /home/ubuntu/logstash-6.5.1/bin/logstash -f /home/ubuntu/logstash-6.5.1/logstash-APIM.conf &
          export PuppetmasterIP=${PuppetMaster.PrivateIp}
          echo "$PuppetmasterIP puppet puppetmaster" >> /etc/hosts
          service puppet restart
          mkdir -p /mnt/efs
          mount -t nfs4 -o nfsvers=4.1 ${WSO2APIMEFSFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
          sleep 300
          export FACTER_profile=apim260
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              puppet agent -vt
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              /opt/puppetlabs/bin/puppet agent -vt
          fi
          sleep 30
          if [ ! -d "/mnt/efs/server" ]; then
              mkdir -p /mnt/efs/server
              cp -r /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/repository/deployment/server /mnt/efs
          fi
          rm -rf  /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/repository/deployment/server
          ln -s /mnt/efs/server /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/repository/deployment/server
          if [ ! -d "/mnt/efs/tenants" ]; then
              mkdir -p /mnt/efs/tenants
              cp -r /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/repository/tenants /mnt/efs
          fi
          rm -rf /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/repository/tenants
          ln -s /mnt/efs/tenants /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/repository/tenants
          echo "${WSO2APIMEFSFileSystem}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          /usr/lib/wso2/wso2am/2.6.0/wso2am-2.6.0/bin/wso2server.sh start
          ${CustomUserData}
          sleep 30
          if [[ ${OperatingSystem} == "Ubuntu1804" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                      /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2APIMNode2AutoScalingGroup --region ${AWS::Region}
                      break
                  fi
              done
          fi
          if [[ ${OperatingSystem} == "CentOS7" ]]; then
              end=$((SECONDS+1200))
              while [ $SECONDS -lt $end ] ; do
                  sleep 10
                  wget --delete-after --server-response --no-check-certificate "https://localhost:9443/carbon/admin/login.jsp"
                  if [ $? -eq "0" ] ; then
                      /usr/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WSO2APIMNode2AutoScalingGroup --region ${AWS::Region}
                      break
                  fi
              done
          fi
          echo 'export HISTTIMEFORMAT="%F %T "' >> /etc/profile.d/history.sh
          cat /dev/null > ~/.bash_history && history -c
    DependsOn:
      - WSO2APIMSecurityGroup
      - WSO2APIMLoadBalancer
      - WSO2APIMVPCInternetGatewayAttachment
      - PuppetMaster
  WSO2APIMNode2AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref WSO2APIMNode2LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      TargetGroupARNs:
        - !Ref WSO2APIMALBTargetGroup
        - !Ref WSO2APIMALB8243TargetGroup
      VPCZoneIdentifier:
        - !Ref WSO2APIMPrivateSubnet2
      Tags:
        - Key: Name
          Value: WSO2APIMInstance2
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
    DependsOn:
      - WSO2APIMLoadBalancer
  WSO2APIMLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref WSO2APIMVPC
      GroupDescription: WSO2 APIM ELB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4000'
          ToPort: '4000'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '9763'
          ToPort: '9763'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9443'
          ToPort: '9443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8243'
          ToPort: '8243'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8280'
          ToPort: '8280'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '4000'
          ToPort: '4000'
          CidrIp: 0.0.0.0/0
  WSO2APIMLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: APIM
      Scheme: internet-facing
      Subnets:
        - !Ref WSO2APIMPublicSubnet1
        - !Ref WSO2APIMPublicSubnet2
      SecurityGroups:
        - !Ref WSO2APIMLoadBalancerSecurityGroup
  WSO2APIMALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /carbon/admin/login.jsp
      HealthCheckPort: 9443
      Matcher:
        HttpCode: 200
      Name: apim-carbon-9443
      Port: 9443
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2APIMVPC
      Tags:
      - Key: Name
        Value: apim
  WSO2APIMALB8243TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 4
      HealthCheckPath: /services/Version
      HealthCheckPort: 8243
      Matcher:
        HttpCode: 200
      Name: apim-carbon-8243
      Port: 8243
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      - Key: stickiness.enabled
        Value: 'true'
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: WSO2APIMVPC
      Tags:
      - Key: Name
        Value: apim
  WSO2APIMALB443Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2APIMALBTargetGroup
      Certificates:
        - CertificateArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':server-certificate'
            - /
            - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2APIMLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
    DependsOn:
      - WSO2APIMLoadBalancerSecurityGroup
  WSO2APIMALB8243Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2APIMALB8243TargetGroup
      Certificates:
        - CertificateArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':server-certificate'
            - /
            - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2APIMLoadBalancer
      Port: 8243
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
    DependsOn:
      - WSO2APIMLoadBalancerSecurityGroup
  WSO2APIMALB9443Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WSO2APIMALBTargetGroup
      Certificates:
        - CertificateArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ':server-certificate'
            - /
            - !Ref CertificateName
      LoadBalancerArn: !Ref WSO2APIMLoadBalancer
      Port: 9443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-1-2017-01
    DependsOn:
      - WSO2APIMLoadBalancerSecurityGroup
Outputs:
  CarbonServerUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/services/'
    Description: APIM service carbon URL
  MgtConsoleUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/carbon'
    Description: APIM service carbon URL
  PublisherUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/publisher'
    Description: APIM service publisher URL
  StoreUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/store'
    Description: APIM service store URL
  AdminUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/admin'
    Description: APIM service admin URL
  KeyManagerUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - '/services/'
    Description: APIM keymanager service admin URL
  GatewayHttpsUrl:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - ':8243'
    Description: APIM HTTPS Gateway endpoint
  GatewayHttpUrl:
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - WSO2APIMLoadBalancer
          - DNSName
        - ':8280'
    Description: APIM HTTP Gateway endpoint
Parameters:
  AWSAccessKeyId:
    Type: String
  AWSAccessKeySecret:
    Type: String
  KeyPairName:
    Description: >-
      The private key used to log in to instances through SSH
    Type: 'AWS::EC2::KeyPair::KeyName'
  CertificateName:
    Description: A valid SSL certificate used for HTTPS
    Type: String
    MinLength: 1
  WSO2InstanceType:
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
    ConstraintDescription: Must be a valid EC2 instance type
  CustomUserData:
    Type: String
    Default: "echo"
  WUMPassword:
    Type: String
    Default: ""
    NoEcho: true
  WUMUsername:
    Type: String
    Default: ""
  DBUsername:
    Type: String
    MinLength: 4
    AllowedPattern: '[A-Za-z0-9\-]+'
  DBPassword:
    Type: String
    MinLength: 8
    NoEcho: true
  DBAllocationStorage:
    Description: Provide storage size in Gigabytes
    Type: Number
    Default: 20
  ElasticSearchEndpoint:
    Description: Will be used to publish WSO2 carbon logs to the ElasticSearch endpoint
    Type: String
    Default: ""
  OperatingSystem:
    Type: String
    Default: Ubuntu1804
    AllowedValues:
     - Ubuntu1804
     - CentOS7
  DBInstanceType:
    Description: If the selected DB Engine is "SQL Server", please use "db.m4.large" as instance type
    Type: String
    Default: db.t2.medium
    AllowedValues:
      - db.t2.medium
      - db.t2.large
      - db.t2.xlarge
      - db.t2.2xlarge
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
      - db.m4.large
  DB:
    Type: String
    Default: MySQL-5.7
    AllowedValues:
      - MySQL-5.7
      - MySQL-5.6
      - Postgres-9.6
      - Postgres-10.5
      - Oracle-SE2-12.1
      - SQLServer-SE-14.00
      - SQLServer-SE-13.00
Mappings:
  WSO2PuppetMasterRegionMap:
    ap-southeast-2:
       Ubuntu1804: ami-0c22709f71c568460
    eu-west-1:
       Ubuntu1804: ami-0bc8db2b836028470
    us-east-1:
       Ubuntu1804: ami-09e21503ae278c94e
    us-east-2:
       Ubuntu1804: ami-0cd597150097def90
    us-west-1:
       Ubuntu1804: ami-06942fe912aec2d15
    us-west-2:
       Ubuntu1804: ami-01b589f0fdf5547e3
  WSO2APIMAMIRegionMap:
    ap-southeast-2:
      CentOS7: ami-08925bf709e8a8a07
      Ubuntu1804: ami-01b644a7b457ee217
    eu-west-1:
      CentOS7: ami-09366c28423a1c1f6
      Ubuntu1804: ami-00287e39ddda4e02d
    us-east-1:
      CentOS7: ami-0adcd9752e440d0f9
      Ubuntu1804: ami-0b74d3aedcf73087c
    us-east-2:
      CentOS7: ami-028f6e82e4d21dc17
      Ubuntu1804: ami-0711a1be44e9a7c0b
    us-west-1:
      CentOS7: ami-06984a5b470ca1ba1
      Ubuntu1804: ami-0477ea2787bb8898f
    us-west-2:
      CentOS7: ami-003dd6436d67bb1a3
      Ubuntu1804: ami-0a695960d3d986461
  DBEngineMap:
    MySQL-5.7:
      DBEngine: "mysql_5.7"
    MySQL-5.6:
      DBEngine: "mysql_5.6"
    Postgres-9.6:
      DBEngine: "postgres_9.6"
    Postgres-10.5:
      DBEngine: "postgres_10.5"
    SQLServer-SE-13.00:
      DBEngine: "sqlserver-se_13.00"
    SQLServer-SE-14.00:
      DBEngine: "sqlserver-se_14.00"
    Oracle-SE2-12.1:
      DBEngine: "oracle-se2_12.1"
Conditions:
  UsePostgresDB: !Equals [postgres, !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]]
  UseSQLServerDB: !Equals [sqlserver-se, !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]]
  UseOracleDB: !Equals [oracle-se2, !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]]
  UseLicensedVersion: !Or [ !Equals [sqlserver-se, !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]], !Equals [oracle-se2, !Select [0, !Split ["_", !FindInMap [ DBEngineMap, !Ref DB, DBEngine]]]] ]
